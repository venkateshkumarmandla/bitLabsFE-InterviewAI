import React from 'react'
import { useState, useEffect } from 'react';
import axios from "axios";
import { useUserContext } from '../common/UserProvider';
import { apiUrl } from '../../services/ApplicantAPIService';
import { useNavigate } from "react-router-dom";
import { Link, useLocation } from 'react-router-dom';
import Postjobimg from '../../images/user/avatar/Postjobimg.png';
import cert from '../../images/cert-img.png';


function RecruiterDashboard() {
    const [token, setToken] = useState('');
    const { user } = useUserContext();
    const [loading, setLoading] = useState(true);
    const [contActiveJobs, setActiveCountJobs] = useState(0);
    const [contInActiveJobs, setInActiveCountJobs] = useState(0);
    const [contJobApplicants, setJobApplicants] = useState(0);
    const [contJobHires, setJobHires] = useState(0);
    const [countInterviews, setInterviews] = useState(0);
    const [applicants, setApplicants] = useState([]);
    const navigate = useNavigate();
    const location = useLocation();
    const [isHovered, setIsHovered] = useState(false);
    const [isWideScreen, setIsWideScreen] = useState(false);

    useEffect(() => {
      const handleResize = () => {
        setIsWideScreen(window.innerWidth > 780);
      };
  
      // Initialize the state on component mount
      handleResize();
  
      // Add event listener for resize
      window.addEventListener('resize', handleResize);
  
      // Cleanup the event listener on component unmount
      return () => window.removeEventListener('resize', handleResize);
    }, []);

    useEffect(() => {
        const jwtToken = localStorage.getItem('jwtToken');
        if (jwtToken) {
            axios.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;
        }
        axios
            .get(`${apiUrl}/job/recruiterscountjobs/${user.id}`)
            .then((response) => {
                setActiveCountJobs(response.data);
            })
            .catch((error) => {
                console.error('Error fetching team members:', error);
            });
    }, [user.id]); 

    useEffect(() => {
      const jwtToken = localStorage.getItem('jwtToken');
      if (jwtToken) {
          axios.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;
      }
      axios
          .get(`${apiUrl}/job/recruiterscountinactivejobs/${user.id}`)
          .then((response) => {
              setInActiveCountJobs(response.data);
          })
          .catch((error) => {
              console.error('Error fetching team members:', error);
          });
  }, [user.id]); 

    useEffect(() => {
        const jwtToken = localStorage.getItem('jwtToken');
        if (jwtToken) {
            axios.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;
        }
        axios
            .get(`${apiUrl}/applyjob/recruiters/applyjobapplicantscount/${user.id}`)
            .then((response) => {
                setJobApplicants(response.data);
            })
            .catch((error) => {
                console.error('Error fetching team members:', error);
            });
    }, [user.id]);

    useEffect(() => {
        const jwtToken = localStorage.getItem('jwtToken');
        if (jwtToken) {
            axios.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;
        }
        axios
            .get(`${apiUrl}/applyjob/recruiters/selected/count`)
            .then((response) => {
                setJobHires(response.data);
            })
            .catch((error) => {
                console.error('Error fetching team members:', error);
            });
    }, [user.id]);

    useEffect(() => {
        const storedToken = localStorage.getItem('jwtToken');
        if (storedToken) {
          setToken(storedToken);
        }
      }, []);

      useEffect(() => {
        const jwtToken = localStorage.getItem('jwtToken');
        if (jwtToken) {
          axios.defaults.headers.common['Authorization'] = `Bearer ${jwtToken}`;
        }
        axios
        .get(`${apiUrl}/applyjob/recruiter/${user.id}/interviews/Interviewing`)
          .then((response) => {
            setApplicants(response.data);
          })
          .catch((error) => {
            console.error('Error fetching job details:', error);
          });
      }, []);

      const todayApplicants = applicants.filter(applicant => {
        const [year, month, day, hour, minute] = applicant.timeAndDate;
        const interviewTimestamp = new Date(year, month - 1, day, hour, minute).getTime();
        const todayTimestamp = new Date().setHours(0, 0, 0, 0);
        return interviewTimestamp >= todayTimestamp && interviewTimestamp < todayTimestamp + 24 * 60 * 60 * 1000;
      });
      const jobopenings = () => {
    
        navigate("/recruiter-jobopenings");
      };
      const jobsclosed = () => {
    
        navigate("/recruiter-jobopenings", { state: { activeButton: 'inactive' }});
      };

      const allapplicants = () => {
        navigate("/recruiter-allapplicants");
      };
      const interviews = () => {
        navigate("/recruiter-applicantinterviews");
      };
      const Postajob = () => {
        navigate("/recruiter-postjob");
      };
      const handleMouseEnter = () => {
        setIsHovered(true);
      };
    
      const handleMouseLeave = () => {
        setIsHovered(false);
      };

      const spanStyle = {
        color: 'white',
        fontFamily: 'Plus Jakarta Sans',
        fontSize: '15px',
        fontWeight: '600',
       
      };
      localStorage.removeItem('tableFilterData');
      localStorage.removeItem('tableSelectedColumns');
      localStorage.removeItem('tableSelectedCheckBoxes');
      localStorage.removeItem('initialData');
      
  return (
    <div>
  
      <div className="dashboard__content">
        <div className="row mr-0 ml-10">
          <div className="col-lg-12 col-md-12">
            <div className="page-title-dashboard">
              <div className="title-dashboard">
              <div className="userName-title">
                       Dashboard
              </div>
              </div>
            </div>
          </div>
          <div className="col-lg-12 col-md-12">
            <div className="row dash-count">
              <div className="col-12 col-xxl-3 col-xl-4 col-lg-4 col-md-12 col-sm-12 display-flex">
                <div className="card" onClick={jobopenings} style={{ cursor: "pointer" }}>
                  <div className="container">
                    <div>
                        <span className="icon-bag color-icon-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="33" viewBox="0 0 32 33" fill="none">
                            <g clip-path="url(#clip0_778_1027)">
                              <path d="M25.3333 5.83333H23.8667C23.5572 4.32855 22.7384 2.97646 21.5483 2.00496C20.3582 1.03345 18.8696 0.501939 17.3333 0.5L14.6667 0.5C13.1304 0.501939 11.6418 1.03345 10.4517 2.00496C9.26157 2.97646 8.4428 4.32855 8.13333 5.83333H6.66667C4.89921 5.83545 3.20474 6.53851 1.95496 7.78829C0.705176 9.03808 0.00211714 10.7325 0 12.5L0 16.5H32V12.5C31.9979 10.7325 31.2948 9.03808 30.045 7.78829C28.7953 6.53851 27.1008 5.83545 25.3333 5.83333ZM10.912 5.83333C11.1868 5.05612 11.695 4.38279 12.3671 3.90545C13.0392 3.42811 13.8423 3.17008 14.6667 3.16667H17.3333C18.1577 3.17008 18.9608 3.42811 19.6329 3.90545C20.305 4.38279 20.8132 5.05612 21.088 5.83333H10.912Z" fill="#2776ED" />
                              <path d="M17.3333 20.5C17.3333 20.8536 17.1929 21.1927 16.9428 21.4428C16.6928 21.6928 16.3536 21.8333 16 21.8333C15.6464 21.8333 15.3072 21.6928 15.0572 21.4428C14.8071 21.1927 14.6667 20.8536 14.6667 20.5V19.1666H0V25.8333C0.00211714 27.6008 0.705176 29.2952 1.95496 30.545C3.20474 31.7948 4.89921 32.4978 6.66667 32.5H25.3333C27.1008 32.4978 28.7953 31.7948 30.045 30.545C31.2948 29.2952 31.9979 27.6008 32 25.8333V19.1666H17.3333V20.5Z" fill="#2776ED" />
                            </g>
                            <defs>
                              <clipPath id="clip0_778_1027">
                                <rect width="32" height="32" fill="white" transform="translate(0 0.5)" />
                              </clipPath>
                            </defs>
                          </svg>
                        </span>
                    </div>
                    <div className="content">
                        <span
                          className="title-count"
                          onClick={jobopenings}
                          style={{ cursor: "pointer" }}
                        >
                          Active Jobs
                        </span>
                        <h3>{contActiveJobs}</h3>

                      </div>
                  </div>

                </div>
              </div>
              <div className="col-12 col-xxl-3 col-xl-4 col-lg-4 col-md-12 col-sm-12 display-flex">
                <div className="card" onClick={jobsclosed} style={{ cursor: "pointer" }}>
                  <div className="container">
                    <div>
                      <div className="box-icon wrap-counter flex" onClick={jobsclosed}>
                          <span className="icon-bag color-icon-2">
                          <svg width="32" height="33" viewBox="0 0 38 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_3608_4456)">
<path d="M25.3333 6.20833H23.8667C23.5572 4.70355 22.7384 3.35146 21.5483 2.37996C20.3582 1.40845 18.8696 0.876939 17.3333 0.875L14.6667 0.875C13.1304 0.876939 11.6418 1.40845 10.4517 2.37996C9.26157 3.35146 8.4428 4.70355 8.13333 6.20833H6.66667C4.89921 6.21045 3.20474 6.91351 1.95496 8.16329C0.705176 9.41308 0.00211714 11.1075 0 12.875L0 16.875H32V12.875C31.9979 11.1075 31.2948 9.41308 30.045 8.16329C28.7953 6.91351 27.1008 6.21045 25.3333 6.20833ZM10.912 6.20833C11.1868 5.43112 11.695 4.75779 12.3671 4.28045C13.0392 3.80311 13.8423 3.54508 14.6667 3.54167H17.3333C18.1577 3.54508 18.9608 3.80311 19.6329 4.28045C20.305 4.75779 20.8132 5.43112 21.088 6.20833H10.912Z" fill="#1E8511"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.9428 21.8176C17.1929 21.5676 17.3333 21.2285 17.3333 20.8748V19.5415H32V21.4809C31.5519 21.4112 31.0927 21.375 30.625 21.375C25.7235 21.375 21.75 25.3485 21.75 30.25C21.75 31.1638 21.8881 32.0453 22.1446 32.8748H6.66667C4.89921 32.8727 3.20474 32.1697 1.95496 30.9199C0.705176 29.6701 0.00211714 27.9756 0 26.2082V19.5415H14.6667V20.8748C14.6667 21.2285 14.8071 21.5676 15.0572 21.8176C15.3072 22.0677 15.6464 22.2082 16 22.2082C16.3536 22.2082 16.6928 22.0677 16.9428 21.8176Z" fill="#1E8511"/>
</g>
<circle cx="31.125" cy="30.375" r="7.5" fill="#1E8511"/>
<path d="M35.5215 27.2713C35.2362 26.9856 34.7729 26.9858 34.4872 27.2713L29.832 31.9267L27.7629 29.8577C27.4772 29.572 27.0141 29.572 26.7284 29.8577C26.4427 30.1434 26.4427 30.6065 26.7284 30.8922L29.3146 33.4784C29.4574 33.6211 29.6446 33.6927 29.8318 33.6927C30.019 33.6927 30.2064 33.6213 30.3491 33.4784L35.5215 28.3058C35.8072 28.0203 35.8072 27.557 35.5215 27.2713Z" fill="white"/>
<defs>
<clipPath id="clip0_3608_4456">
<rect width="32" height="32" fill="white" transform="translate(0 0.875)"/>
</clipPath>
</defs>
</svg>

                          </span>
                      </div>
                    </div>
                    <div className="content">
                        <span
                          className="title-count"
                          onClick={jobsclosed}
                          style={{ cursor: "pointer" }}
                        >
                          Closed Jobs
                        </span>
                        <h3>{contInActiveJobs}</h3>
                      </div>
                  </div>
                </div>
              </div>
              <div className="col-12 col-xxl-3 col-xl-4 col-lg-4 col-md-12 col-sm-12 display-flex">
                <div className="card" onClick={allapplicants} style={{ cursor: "pointer" }}>
                  <div className="container">
                    <div>
                      <div className="box-icon wrap-counter flex" onClick={allapplicants} >
                          <span className="icon-bag color-icon-3">
                          <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32" fill="none">
  <g clip-path="url(#clip0_3349_1173)">
    <path d="M32 23.3333V24H16V23.3333C16 20.9893 17.744 19.0613 20 18.7347C20 17.264 21.196 16 22.6667 16H25.3333C26.804 16 28 17.264 28 18.7347C30.256 19.0613 32 20.9893 32 23.3333ZM13.3333 23.3333C13.3333 21.728 13.8813 20.232 14.7907 19.008C13.8933 18.7933 12.9613 18.6667 12 18.6667C5.39067 18.6667 0.0120022 24.0373 2.24782e-06 30.644C-0.00133109 31.3867 0.590669 32 1.33334 32H15.0147C13.9653 30.7307 13.3333 29.104 13.3333 27.3333V23.3333ZM12 16C16.412 16 20 12.412 20 8C20 3.588 16.412 0 12 0C7.588 0 4 3.588 4 8C4 12.412 7.588 16 12 16ZM24 28C23.264 28 22.6667 27.4027 22.6667 26.6667H16V27.3333C16 29.9067 18.0933 32 20.6667 32H27.3333C29.9067 32 32 29.9067 32 27.3333V26.6667H25.3333C25.3333 27.4027 24.736 28 24 28Z" fill="#FF6633"/>
  </g>
  <defs>
    <clipPath id="clip0_3349_1173">
      <rect width="32" height="32" fill="white"/>
    </clipPath>
  </defs>
</svg>
                          </span>
                      </div>
                    </div>
                    <div className="content">
                        <span
                          className="title-count"
                          onClick={allapplicants}
                          style={{ cursor: "pointer" }}
                        >
                          Applicants
                        </span>
                        <h3>{contJobApplicants}</h3>
                      </div>
                  </div>
                </div>
              </div>
             
              
              {/* New one*/}

              <div className="col-12 col-xxl-9 col-xl-12 col-lg-12 col-md-12 col-sm-12 display-flex certificatebox">
                <div className="card " style={{ cursor: "pointer" }}>
                  <div className="resumecard" > 
                    <div className="resumecard-content">
                    <div className="resumecard-text" style={{flexGrow:"50"}}>
                        <div className="resumecard-heading">
                          <h2 className="heading1">Pre-screened talent, ready to hire! </h2>
                          <div className="title-count">
                          Share your job details and let the perfect candidates find you.
                          </div>
                        </div>
                        <div className="resumecard-button">
                          <Link
                            to="/recruiter-postjob"
                            className={`button-link1`}
                            // style={linkStyle}
                            onMouseEnter={() => setIsHovered(true)}
                            onMouseLeave={() => setIsHovered(false)}
                            
                          >
                            <span className="button button-custom" style={{marginLeft:"-5px"}}>Post <span className="lowercase">a</span> Job</span>
                          </Link>
                        </div>
                      </div>
                      <div className="resumecard-icon">
                      <svg xmlns="http://www.w3.org/2000/svg" width="152" height="142" viewBox="0 0 152 142" fill="none">
  <g clip-path="url(#clip0_3379_4049)">
    <circle cx="74.2832" cy="63.9937" r="48.7378" fill="#FFF5E6"/>
    <path d="M45.6406 34.6549C53.8053 26.4526 64.2757 22.4531 74.9544 22.4531C85.4242 22.4531 95.8903 26.4526 104.054 34.6549C112.01 42.6468 115.992 53.3708 115.992 63.8925C115.992 74.6158 112.01 85.1294 104.054 93.1213C95.8903 101.324 85.4242 105.323 74.9544 105.323C64.2757 105.323 53.8053 101.323 45.6406 93.1213C37.6848 85.13 33.7065 74.6158 33.7065 63.8925C33.7065 53.3701 37.6848 42.6468 45.6406 34.6549ZM74.9544 25.1921C64.9034 25.1921 55.0645 28.9754 47.5275 36.5466C39.9899 44.1177 36.2205 54.0013 36.2205 63.8925C36.2205 73.7837 39.9899 83.6579 47.5275 91.229C55.0645 98.802 64.9034 102.591 74.9544 102.591C84.7959 102.591 94.6336 98.802 102.172 91.229C109.71 83.6579 113.474 73.7742 113.474 63.8925C113.474 54.0108 109.71 44.1177 102.172 36.5466C94.6336 28.9754 84.7959 25.1921 74.9544 25.1921Z" fill="#F97F23"/>
    <path d="M108.037 108.265L118.919 97.1208C119.967 96.2811 121.013 95.8604 122.058 95.8604C123.32 95.8604 124.366 96.2811 125.203 97.1208L150.745 122.989C151.581 123.829 152 124.879 152 125.938C152 127.199 151.581 128.25 150.745 129.089L139.86 140.233C139.024 141.074 137.76 141.501 136.715 141.501C135.459 141.501 134.414 141.074 133.578 140.233L108.037 114.576C107.192 113.737 106.775 112.476 106.775 111.424C106.775 110.163 107.192 109.105 108.037 108.265ZM120.803 99.0113L109.918 110.162C109.5 110.373 109.292 110.793 109.292 111.423C109.292 111.844 109.5 112.265 109.918 112.684L135.459 138.34C135.669 138.552 136.295 138.762 136.715 138.762C137.134 138.762 137.553 138.552 137.972 138.34L148.862 127.198C149.281 126.988 149.491 126.567 149.491 125.938C149.491 125.517 149.281 125.089 148.862 124.878L123.32 99.0106C123.105 98.8021 122.477 98.5917 122.058 98.5917C121.639 98.5917 121.222 98.8021 120.803 99.0106V99.0113Z" fill="#F97F23"/>
    <path d="M107.618 87.4481L118.919 99.0111C119.548 99.4319 119.548 100.273 118.919 100.903L111.592 108.265C111.175 108.895 110.337 108.895 109.71 108.265L98.3997 96.7005C97.7714 96.2816 97.7714 95.44 98.3997 94.8107H98.6073C99.2356 94.1789 99.8715 93.76 100.498 93.1219C101.126 92.7011 101.755 92.0712 102.381 91.4406C103.008 90.8107 103.427 90.1795 104.054 89.5502C104.472 88.919 105.101 88.2897 105.518 87.6579C105.937 87.0267 106.774 87.0267 107.408 87.4481H107.618ZM116.202 99.8527L106.774 90.3899L105.937 91.4406C105.518 92.0712 104.891 92.7011 104.265 93.3323C103.636 93.9616 102.8 94.6003 102.172 95.2296L101.336 96.0712L110.756 105.535L116.202 99.8527Z" fill="#F97F23"/>
    <path d="M74.9543 36.9678C82.2793 36.9678 88.9797 39.9171 93.7995 44.7493C98.8193 49.7988 101.755 56.5303 101.755 63.8929C101.755 71.4634 98.8187 78.1955 93.7995 83.0271C88.9797 87.8675 82.2793 91.0184 74.9543 91.0184C67.4167 91.0184 60.7157 87.8675 55.9009 83.0271H55.6915C50.8773 77.9769 47.9451 71.253 47.9451 63.8929C47.9451 56.5328 50.8773 49.7988 55.9009 44.7493C60.7157 39.9171 67.4167 36.9678 74.9543 36.9678ZM91.9157 46.6467C87.5154 42.2283 81.4434 39.4963 74.9543 39.4963C68.2532 39.4963 62.1799 42.2283 57.7834 46.6467C53.3875 51.06 50.6647 57.1615 50.6647 63.8929C50.6647 70.6244 53.3875 76.7171 57.574 81.1373H57.7834C62.1799 85.5487 68.2532 88.2895 74.9543 88.2895C81.4434 88.2895 87.5154 85.5487 91.9157 81.1373C96.3091 76.7164 99.0269 70.6237 99.0269 63.8929C99.0269 57.1621 96.3091 51.06 91.9157 46.6467Z" fill="#5B5B64"/>
    <path d="M88.5608 87.2373C86.6776 88.2899 84.3787 89.34 82.0692 89.9693C79.7684 90.6005 77.2576 91.0194 74.9536 91.0194C72.4397 91.0194 70.3483 90.6005 68.0432 89.9693C65.7386 89.5504 63.6473 88.7088 61.7604 87.4483C61.3427 87.2373 61.1333 86.8184 61.1333 86.3976V82.1877C61.1333 79.8765 61.9698 77.5565 63.6473 76.0856C65.3204 74.4056 67.4161 73.3555 69.9257 73.3555H80.6043C82.9064 73.3555 85.2134 74.4056 86.6764 76.0856C88.352 77.5565 89.3973 79.8765 89.3973 82.1877V85.9768C89.3973 86.3976 88.9784 86.8184 88.5595 87.2373H88.5608ZM81.232 87.4483C83.1152 86.8184 85.0058 86.1872 86.6777 85.1301V82.1877C86.6777 80.5058 86.0506 79.0349 84.7958 77.9773C83.7504 76.7168 82.2786 76.0856 80.6049 76.0856H69.9263C68.2532 76.0856 66.5795 76.7168 65.5304 77.9773C64.4838 79.0349 63.6479 80.5058 63.6479 82.1877V85.549C65.321 86.3976 66.9984 87.0269 68.6715 87.4483C70.7666 88.0789 72.6491 88.2899 74.9543 88.2899C77.05 88.2899 79.3502 87.8685 81.232 87.4483Z" fill="#5B5B64"/>
    <path d="M75.3725 52.9517C77.8859 52.9517 80.1867 54.0018 81.8604 55.6906C83.5347 57.3719 84.3794 59.4727 84.3794 61.9943C84.3794 64.5159 83.3246 66.8335 81.8604 68.5147C80.1867 70.196 77.8859 71.2537 75.3725 71.2537C72.8592 71.2537 70.5578 70.1967 68.8809 68.5147C67.4167 66.8335 66.3669 64.5222 66.3669 61.9943C66.3669 59.4664 67.4167 57.3719 68.8809 55.6906C70.5578 54.0018 72.8592 52.9517 75.3725 52.9517ZM79.9785 57.5804C78.7218 56.3199 77.2582 55.6906 75.3725 55.6906C73.6951 55.6906 72.022 56.3199 70.7672 57.5804C69.7175 58.6311 69.0898 60.3118 69.0898 61.9937C69.0898 63.8923 69.7168 65.3638 70.7672 66.6224C72.022 67.6744 73.6951 68.5141 75.3725 68.5141C77.05 68.5141 78.7218 67.6738 79.9785 66.6224C81.0245 65.3638 81.8604 63.8929 81.8604 61.9937C81.8604 60.3118 81.0245 58.6305 79.9785 57.5804Z" fill="#5B5B64"/>
    <path d="M52.3409 41.1759L51.9233 41.5967C50.6647 42.8572 52.5503 44.5391 53.8051 43.4884C54.6454 42.6468 55.2732 42.0175 56.1103 41.3863C57.3651 39.9167 55.2732 38.2285 54.224 39.2855C53.5957 39.9167 52.9686 40.5466 52.3409 41.1759ZM47.1085 54.2123C47.7356 52.7415 45.4317 51.6914 44.5951 53.3708C44.3857 54.2123 44.1775 55.059 43.968 56.1097C43.5498 58.0014 46.2682 58.2118 46.4776 56.7415C46.6902 55.9012 46.899 55.059 47.1085 54.2123ZM46.0594 69.3565C45.8499 67.6746 43.1303 68.0941 43.5492 69.9858C43.5492 70.8343 43.758 71.6747 44.1769 72.5144C44.804 74.6164 47.1085 73.1455 46.6902 71.8851C46.4776 71.0435 46.2682 70.1962 46.0594 69.3565ZM52.5503 83.0273C51.2955 81.7668 49.6181 83.6585 50.6641 84.919C51.2949 85.5489 51.9226 86.187 52.5503 86.8182C52.9686 87.4481 53.8051 87.4481 54.436 86.8182C54.8549 86.3974 54.8549 85.5489 54.436 84.919C53.8051 84.2878 53.1774 83.6585 52.5503 83.0273ZM65.1115 91.6498C63.6479 91.0186 62.6019 93.5402 64.2756 94.1783C65.1115 94.5998 65.9487 94.8101 66.9984 95.0187C68.8809 95.4394 69.0897 92.7005 67.6261 92.4901C66.789 92.2816 65.9487 91.8602 65.1115 91.6498ZM80.1867 92.9109C78.5142 93.1213 78.9331 95.8602 80.6055 95.4394C81.6509 95.229 82.4887 95.0186 83.3246 94.8101C85.2153 94.1783 84.3793 91.8602 82.6962 92.2816C81.8603 92.4901 81.0244 92.7005 80.1867 92.9109ZM93.7994 86.3974C92.3346 87.6579 94.4259 89.3398 95.6807 88.2897C96.309 87.8683 96.9361 87.0267 97.5626 86.3974C98.8193 85.13 96.9361 83.2377 95.6807 84.4982C95.2618 85.13 94.4259 85.7593 93.7994 86.3974ZM102.381 73.7749C101.755 75.4568 104.265 76.5069 104.891 74.6164C105.31 73.7749 105.518 72.9352 105.729 72.0936C106.146 69.9858 103.427 69.9858 103.218 71.4636C103.008 72.304 102.8 72.9358 102.381 73.7749ZM103.636 58.6313C104.054 60.3126 106.563 59.8937 106.356 58.2118C106.146 57.3721 105.937 56.3201 105.729 55.4804C104.891 53.7915 102.8 54.4303 103.218 56.1097C103.427 56.9513 103.427 57.791 103.636 58.6313ZM97.1449 44.9599C98.6073 46.4308 100.29 44.3287 99.2356 43.2786C98.6073 42.4389 97.9808 41.8077 97.3538 41.1765C96.0977 39.9173 94.2158 41.8077 95.4706 43.0682C96.0977 43.6982 96.726 44.3294 97.1449 44.9599ZM84.7957 36.3368C86.4701 36.968 87.306 34.2366 85.8417 33.8152C85.0052 33.395 83.9529 33.1846 83.1145 32.9755C81.0238 32.5547 81.0238 35.2861 82.2786 35.4971C83.1145 35.7056 83.9529 35.916 84.7957 36.3368ZM69.7168 34.8653C71.3943 34.6549 70.976 31.9235 69.2992 32.3443C68.2532 32.5547 67.4167 32.7651 66.5795 32.9755C64.6939 33.6048 65.531 35.916 67.2072 35.4971C68.0438 35.2867 68.8809 35.0757 69.7168 34.8653Z" fill="#F47E1E"/>
    <path d="M133.368 122.778C134.623 121.517 136.088 121.097 137.553 121.097C139.017 121.097 140.489 121.517 141.534 122.778C142.789 123.829 143.206 125.307 143.206 126.778C143.206 128.249 142.789 129.72 141.534 130.981C140.489 132.03 139.024 132.663 137.553 132.663C136.081 132.663 134.623 132.03 133.368 130.981C132.321 129.72 131.694 128.249 131.694 126.778C131.694 125.306 132.321 123.829 133.368 122.778ZM137.553 123.829C136.715 123.829 135.878 124.039 135.25 124.668C134.623 125.307 134.414 126.149 134.414 126.778C134.414 127.618 134.623 128.46 135.25 129.089C135.878 129.72 136.715 129.93 137.553 129.93C138.179 129.93 139.024 129.72 139.65 129.089C140.277 128.46 140.696 127.618 140.696 126.778C140.696 126.149 140.277 125.307 139.65 124.668C139.024 124.039 138.179 123.829 137.553 123.829Z" fill="#F4F7F2"/>
    <path d="M69.9263 123.618C72.0214 123.618 71.8126 120.886 70.1389 120.886C69.2986 120.886 68.4614 120.886 67.6255 120.678C65.9481 120.467 65.5304 122.989 67.2066 123.408C68.2526 123.408 69.0898 123.618 69.9263 123.618ZM131.694 63.6821C131.694 65.364 134.414 65.364 134.414 63.6821V60.9437C134.414 59.2625 131.694 59.0521 131.694 60.9437V63.6821ZM130.649 53.1603C131.068 54.8485 133.578 54.6312 133.368 52.7414C133.159 51.9017 132.949 50.8497 132.74 50.0094C132.532 48.5385 129.804 48.7489 130.223 50.6387C130.433 51.4803 130.649 52.32 130.649 53.1603ZM127.923 43.278C128.551 44.7488 131.068 43.9073 130.433 42.2279C130.014 41.3863 129.597 40.5466 129.386 39.7062C128.759 38.2284 126.249 38.8647 126.876 40.7563C127.295 41.3856 127.504 42.4376 127.923 43.278ZM123.105 33.8151C124.158 35.2866 126.459 34.0262 125.413 32.3442L123.949 30.0261C123.105 28.765 120.803 30.0261 121.848 31.713L123.105 33.8151ZM116.829 25.4024C118.293 26.8733 119.966 24.7725 118.919 23.7211C118.293 23.0849 117.666 22.4537 117.038 21.6134C115.783 20.5633 113.892 22.4537 115.156 23.7211C115.783 24.1419 116.41 24.7731 116.829 25.4024ZM109.292 18.4612C110.964 19.5132 112.009 16.9922 110.756 16.3604C110.128 15.7292 109.292 15.3015 108.663 14.6722C106.983 13.6214 105.729 16.15 107.192 16.9922C107.827 17.4111 108.454 17.8319 109.292 18.4612ZM100.29 12.9902C101.755 13.6214 103.218 11.5206 101.543 10.4693C100.707 10.0497 99.8715 9.62955 99.0262 9.41853C97.3538 8.57883 96.516 11.0998 97.9809 11.7297C98.8187 12.1505 99.6615 12.5713 100.29 12.9902ZM90.6521 9.20813C92.1239 9.62892 93.1711 7.10038 91.4899 6.46919C90.6521 6.25879 89.6061 6.05029 88.7702 5.83989C86.889 5.41909 86.6776 8.15803 88.1419 8.36843C88.9797 8.57883 89.8162 8.78734 90.6521 9.20813ZM80.3961 7.10101C82.0698 7.31834 82.6963 4.78853 80.815 4.36963H78.0953C76.0002 4.36963 76.2135 6.89061 77.8859 6.89061C78.7218 7.10101 79.5602 7.10101 80.3961 7.10101ZM70.1395 7.10101C71.8126 6.68022 71.6037 4.36963 69.9269 4.36963C68.8816 4.36963 68.0444 4.58003 67.2079 4.78853C65.3216 4.99893 65.9493 7.52054 67.4173 7.31897C68.2539 7.31897 69.2998 7.10164 70.1401 7.10164L70.1395 7.10101ZM59.8785 8.78797C61.5522 8.15866 60.7157 6.05091 59.042 6.25942C58.2023 6.46982 57.3651 6.89061 56.5286 7.10101C54.6461 7.73724 55.9015 10.2589 57.3651 9.62955C58.2023 9.41916 59.042 9.20876 59.8785 8.78797ZM50.037 12.5713C51.7132 11.5206 50.4546 9.41853 48.991 10.0497C48.1551 10.4693 47.318 10.8894 46.4777 11.3102C44.8046 12.3603 46.2682 14.6715 47.7362 13.8318C48.5728 13.411 49.1998 12.9902 50.037 12.5713ZM41.244 18.0417C42.4988 17.2001 41.244 14.6715 39.5709 15.7292C38.9426 16.3604 38.1029 16.9916 37.4746 17.4105C36.011 18.8814 38.1029 20.5633 39.1521 19.5125C39.7791 19.0917 40.4069 18.4606 41.244 18.0417ZM33.2882 24.9835C34.543 23.7211 32.6611 21.8238 31.4057 23.0849C30.7742 23.7211 30.1465 24.3523 29.5188 25.1926C28.4734 26.2427 30.1458 28.3448 31.6138 26.8739L33.2882 24.9835ZM27.0054 33.1846C27.8457 31.5052 25.5411 30.2352 24.7052 31.7137C24.2863 32.5553 23.8687 33.1846 23.241 34.0262C22.4007 35.497 24.7052 36.7575 25.5418 35.2866C25.9607 34.6555 26.5878 33.8151 27.006 33.1846H27.0054ZM22.1913 42.4383C22.8183 40.757 20.3087 39.7069 19.681 41.3863C19.2596 42.2279 19.0502 43.0676 18.6319 43.9079C18.0048 45.5892 20.7276 46.6468 21.1453 44.7495C21.5629 44.1183 21.773 43.2786 22.1913 42.4383ZM19.0502 52.3206C19.4678 50.6393 16.7494 50.2198 16.54 51.9017C16.3305 52.7414 16.1211 53.5811 16.1211 54.6318C15.7034 56.3201 18.4225 56.7415 18.6319 55.0596C18.8401 54.0025 19.0502 53.1603 19.0502 52.3206ZM18.0042 62.8424C18.0042 60.9437 15.2852 60.9437 15.2852 62.8424V65.5725C15.2852 67.0434 18.0042 67.2538 18.0042 65.364V62.8424ZM18.6319 73.1455C18.4225 71.4642 15.7034 71.885 16.1211 73.5644C16.1211 74.6164 16.3305 75.4567 16.54 76.2964C16.7494 77.9777 19.4678 77.7673 19.2596 75.8775C19.0502 75.0359 18.8407 73.9852 18.6319 73.1455ZM21.3541 83.2376C20.5182 81.5564 18.213 82.6083 18.8407 84.2877C19.0502 85.13 19.4684 85.9766 19.681 86.8182C20.3087 88.4982 22.8183 87.4481 22.1913 85.7592C21.9824 84.9189 21.5635 84.0792 21.3541 83.2376ZM25.7506 92.9109C24.7052 91.2289 22.4001 92.7005 23.4498 94.1783C23.8681 95.0186 24.2857 95.6498 24.9134 96.4895C25.7506 97.9604 28.0551 96.4895 27.0054 95.0186C26.5878 94.3887 26.1689 93.5402 25.7506 92.9109ZM31.8239 101.324C30.3559 99.8527 28.6828 101.96 29.7288 103.012C30.3559 103.852 30.9874 104.481 31.6145 105.113C32.8693 106.374 34.7518 104.481 33.497 103.223C32.8699 102.592 32.2422 101.96 31.8239 101.324ZM39.1521 108.684C38.1029 107.423 36.2198 109.316 37.4746 110.583C38.3111 111.214 38.9426 111.843 39.7791 112.265C41.4528 113.315 42.4988 111.004 41.2434 110.162C40.6163 109.743 39.9886 109.105 39.1514 108.684H39.1521ZM47.945 114.365C46.477 113.525 45.0128 115.837 46.6903 116.676C47.5274 117.097 48.1545 117.525 48.991 117.946C50.8779 118.786 51.7138 116.047 50.2458 115.626L47.945 114.365ZM57.574 118.365C56.1103 117.946 54.8555 120.257 56.738 121.097L59.2514 121.728C61.3434 122.147 61.3434 119.415 59.8785 119.207C59.042 118.996 58.2023 118.786 57.574 118.365Z" fill="#BABABA"/>
    <path d="M31.6145 6.05096L33.7065 4.78857C33.9159 4.78857 34.3342 4.78857 34.5436 4.99897L35.5928 7.31838C35.8022 7.51996 35.8022 7.94831 35.3839 7.94831L33.2888 9.2088C33.0794 9.4192 32.6618 9.4192 32.6618 8.9984L31.407 6.89065C31.1975 6.68026 31.1969 6.25946 31.6145 6.05096ZM33.7065 6.25946L32.6611 6.89065L33.2882 7.94831L34.3336 7.31838L33.7065 6.25946Z" fill="#FF8550"/>
    <path d="M30.356 5.2096L29.3106 5.84079L29.9377 7.10128L30.9868 6.47009L30.356 5.2096ZM28.264 5.2096L30.356 3.94848C30.5654 3.73808 30.9868 3.94848 31.1963 4.15887L32.2416 6.25906C32.4511 6.67986 32.4511 6.89026 32.0334 7.10065L29.9377 8.3687C29.7283 8.5791 29.3106 8.3687 29.3106 8.15831L28.0558 6.05056C27.8464 5.62976 27.8464 5.41937 28.2647 5.20897L28.264 5.2096Z" fill="#FF9960"/>
    <path d="M33.0787 3.73762L30.9867 4.99812C30.5653 5.20851 30.3559 4.99812 30.1465 4.78772L28.8917 2.68753C28.6828 2.47713 28.8917 2.05823 29.1011 1.84783L31.1962 0.586709C31.4056 0.376312 31.8233 0.586709 32.0334 0.795216L33.2882 2.8973C33.2882 3.31683 33.2882 3.52723 33.0787 3.73762ZM30.7742 3.73762L32.0334 3.10832L31.1962 1.84783L30.1465 2.47713L30.7742 3.73762Z" fill="#DABFAF"/>
    <path d="M34.1253 4.57949L35.3833 3.9483L34.543 2.89757L33.4964 3.52751L34.1253 4.57949ZM36.4293 4.57949L34.3342 5.83998C33.9159 6.05038 33.7065 6.05038 33.497 5.62958L32.2422 3.52751C32.034 3.31711 32.2422 2.89757 32.4517 2.68781L34.5436 1.63771C34.7524 1.42731 35.1745 1.42731 35.3839 1.84811L36.6387 3.9483C36.6387 4.1587 36.6387 4.57949 36.4293 4.57949Z" fill="#FFA074"/>
    <path d="M126.668 86.608L128.759 85.3406C128.968 85.1302 129.386 85.3406 129.597 85.5491L130.85 87.6581C130.85 88.0789 130.85 88.29 130.65 88.4985L128.551 89.7589C128.133 89.9693 127.923 89.759 127.714 89.5504L126.459 87.4484C126.249 87.2373 126.459 86.8184 126.668 86.608ZM128.759 86.608L127.714 87.2373L128.34 88.4985L129.597 87.8685L128.759 86.608Z" fill="#C9C4BE"/>
    <path d="M125.413 85.7594L124.366 86.3975L124.994 87.658L126.249 86.8183L125.413 85.7594ZM123.32 85.7594L125.413 84.4983C125.622 84.2879 126.039 84.4983 126.249 84.7087L127.504 86.8183C127.504 87.0268 127.504 87.4482 127.295 87.658L125.203 88.9191C124.784 88.9191 124.577 88.9191 124.366 88.7087L123.105 86.6079C122.901 86.1871 123.105 85.9767 123.32 85.7594Z" fill="#CBC5BE"/>
    <path d="M128.132 84.2875L126.039 85.5487C125.622 85.7591 125.413 85.5487 125.203 85.3402L123.949 83.2374C123.739 82.8185 123.949 82.6081 124.158 82.3977L126.249 81.1372C126.668 80.9262 126.876 81.1373 127.087 81.347L128.34 83.4478C128.551 83.6582 128.34 84.079 128.132 84.2875ZM125.83 84.2875L127.087 83.6582L126.459 82.3977L125.203 83.027L125.83 84.2875Z" fill="#FF804D"/>
    <path d="M129.178 85.1299L130.433 84.498L129.805 83.2375L128.551 84.0791L129.178 85.1299ZM131.485 85.1299L129.385 86.3973C128.968 86.6077 128.758 86.3973 128.551 86.1869L127.294 84.0791C127.086 83.8687 127.294 83.4479 127.503 83.2375L129.596 81.9771C130.013 81.9771 130.223 81.9771 130.433 82.1874L131.694 84.2876C131.904 84.7084 131.694 84.9188 131.485 85.1299Z" fill="#BFBBC8"/>
    <path d="M88.9798 129.72L91.0712 128.459C91.2806 128.249 91.6995 128.459 91.9159 128.67L93.1713 130.77C93.1713 130.981 93.1713 131.4 92.9618 131.61L90.6523 132.871C90.4447 132.871 90.0252 132.871 90.0252 132.663L88.7704 130.56C88.5609 130.139 88.5609 129.93 88.9798 129.72ZM91.0712 129.72L90.0252 130.35L90.6523 131.61L91.6995 130.77L91.0712 129.72Z" fill="#F6F5F5"/>
    <path d="M87.7249 128.878L86.6776 129.509L87.306 130.559L88.3532 129.929L87.7249 128.878ZM85.6316 128.878L87.7249 127.617C87.9343 127.407 88.3532 127.407 88.5608 127.827L89.8162 129.929C89.8162 130.138 89.8162 130.559 89.6061 130.77L87.306 131.819C87.0965 132.029 86.6776 132.029 86.6776 131.609L85.4241 129.508C85.2146 129.298 85.2146 128.878 85.6316 128.878Z" fill="#FF7B44"/>
    <path d="M90.4446 127.407L88.3533 128.459C87.9344 128.669 87.725 128.669 87.5155 128.249L86.2601 126.148C86.0506 125.937 86.2601 125.517 86.4701 125.517L88.5609 124.249C88.7703 124.038 89.1873 124.038 89.3986 124.459L90.6522 126.567C90.6522 126.777 90.6522 127.198 90.4446 127.407ZM88.142 127.198L89.3986 126.567L88.5609 125.517L87.5155 126.148L88.142 127.198Z" fill="#B08273"/>
    <path d="M91.4899 128.249L92.7523 127.617L92.1239 126.357L90.8635 126.988L91.4899 128.249ZM93.7995 128.249L91.6994 129.509C91.2805 129.72 91.071 129.509 90.8635 129.299L89.6062 127.198C89.3986 126.777 89.6062 126.567 89.8162 126.357L91.9157 125.089C92.1239 124.878 92.5422 125.089 92.7523 125.307L94.0071 127.407C94.2165 127.617 94.0071 128.038 93.7995 128.249Z" fill="#CEB7B0"/>
    <path d="M4.60668 35.4971C5.86148 35.4971 6.90683 36.1264 7.74775 36.968C8.58428 37.8077 9.00255 38.8653 9.00255 40.1258C9.00255 41.3863 8.58428 42.4383 7.74775 43.2786C6.90746 44.1183 5.86211 44.5397 4.60668 44.5397C3.35125 44.5397 2.09269 44.1189 1.46498 43.2786C0.629073 42.4389 0.000732422 41.3869 0.000732422 40.1258C0.000732422 38.8647 0.629073 37.8077 1.46498 36.968C2.09269 36.1264 3.34749 35.4971 4.60668 35.4971ZM5.86148 38.8653C5.44258 38.4376 5.02432 38.2291 4.60668 38.2291C3.97834 38.2291 3.55694 38.4382 3.34749 38.8653C2.92985 39.0757 2.7204 39.4965 2.7204 40.1258C2.7204 40.5466 2.92985 41.1765 3.34749 41.3869C3.55694 41.8077 3.97834 42.0181 4.60668 42.0181C5.02432 42.0181 5.44258 41.8077 5.86148 41.3869C6.27912 41.1765 6.48856 40.5472 6.48856 40.1258C6.48856 39.4965 6.27912 39.0757 5.86148 38.8653Z" fill="#FF8746"/>
    <path d="M144.044 95.0186C145.3 95.0186 146.562 95.4393 147.4 96.2809C148.237 97.1225 148.653 98.1707 148.653 99.4318C148.653 100.693 148.236 101.96 147.4 102.802C146.562 103.642 145.3 104.062 144.044 104.062C142.789 104.062 141.741 103.642 140.906 102.802C140.07 101.96 139.65 100.692 139.65 99.4318C139.65 98.1714 140.07 97.1206 140.906 96.2809C141.741 95.4393 142.789 95.0186 144.044 95.0186ZM145.509 98.1707C145.089 97.9603 144.67 97.7518 144.044 97.7518C143.625 97.7518 143.205 97.9603 142.788 98.1707C142.579 98.5922 142.369 99.0111 142.369 99.4318C142.369 100.063 142.579 100.482 142.788 100.903C143.205 101.113 143.625 101.324 144.044 101.324C144.67 101.324 145.089 101.113 145.509 100.903C145.717 100.482 145.927 100.063 145.927 99.4318C145.927 99.0111 145.717 98.5922 145.509 98.1707Z" fill="#FF9153"/>
    <path d="M97.981 16.9917C99.2358 16.9917 100.498 17.621 101.336 18.4607C102.172 19.3023 102.591 20.3524 102.591 21.6129C102.591 22.8734 102.172 23.931 101.336 24.7726C100.498 25.6123 99.2358 26.0331 97.981 26.0331C96.7262 26.0331 95.6802 25.6123 94.8443 24.7726C94.0065 23.931 93.5876 22.874 93.5876 21.6129C93.5876 20.3518 94.0065 19.3023 94.8443 18.4607C95.6802 17.621 96.7262 16.9917 97.981 16.9917ZM99.4452 20.353C99.0264 19.9322 98.6075 19.7218 97.981 19.7218C97.5621 19.7218 97.1451 19.9322 96.7262 20.353C96.5161 20.5634 96.3086 20.9823 96.3086 21.6135C96.3086 22.0343 96.5161 22.6642 96.7262 22.8746C97.1451 23.3024 97.5621 23.5127 97.981 23.5127C98.6075 23.5127 99.0264 23.3024 99.4452 22.8746C99.6616 22.6642 99.8717 22.0349 99.8717 21.6135C99.8717 20.9823 99.6616 20.5634 99.4452 20.353Z" fill="#C9C4BE"/>
  </g>
  <defs>
    <clipPath id="clip0_3379_4049">
      <rect width="152" height="141" fill="white" transform="translate(0 0.5)"/>
    </clipPath>
  </defs>
</svg>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="col-12 col-xxl-9 col-xl-12 col-lg-12 col-md-12 col-sm-12 display-flex certificatebox">
                <div className="card " style={{ cursor: "pointer" }}>
                  <div className="resumecard" > 
                    <div className="resumecard-content">
                    <div className="resumecard-text" style={{flexGrow:"50"}}>
                        <div className="resumecard-heading">
                          <h2 className="heading1">Connect with top talent instantly! <span style={{color:'#F97316',fontSize:'14px',borderRadius: '55px',background: 'rgba(250, 118, 23, 0.10)',padding: '2px 12px 4px 12px',gap:'10px',alignItems:'center',justifyContent:'center'
}}>Staffing Solutions</span></h2>
                          <div className="title-count">
                          Quickly connect with the right candidates, hassle free.
                          </div>
                        </div>
                        <div className="resumecard-button">
                          <Link
                            to="https://www.tekworks.in/#Contact-Us"
                            target='_new'
                            className={`button-link1`}
                            // style={linkStyle}
                            onMouseEnter={() => setIsHovered(true)}
                            onMouseLeave={() => setIsHovered(false)}
                          >
                            <span className="button button-custom" style={{marginLeft:"-5px"}}>Contact Us</span>
                          </Link>
                        </div>
                      </div>
                      <div className="resumecard-icon">
                      <img
                            src={cert}
                            alt="Certificate"
                            style={{ width: "164px", height: "auto;", objectFit:"contain", marginTop: "8px" }}
                          />
                          
                      </div>
                    </div>
                  </div>
                </div>
              </div>


            </div>
          </div>
        </div>
      </div>
  
  </div>
 
  )
}

export default RecruiterDashboard;
function formatDateTime(dateTimeArray) {
  const [year, month, day, hour, minute] = dateTimeArray;
  const formattedDate = new Date(year, month - 1, day).toLocaleDateString('en-US', {
    day: 'numeric',
    month: 'short',
    year: 'numeric',
  });
  const formattedTime = new Date(year, month - 1, day, hour, minute).toLocaleTimeString('en-US', {
    hour: 'numeric',
    minute: 'numeric',
    hour12: true,
  });
 
  return `${formattedDate} ${formattedTime}`;
}