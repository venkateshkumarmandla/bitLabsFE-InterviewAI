{
    "testName": "Core Java MCQ Test",
    "duration": "30 mins",
    "numberOfQuestions": 30,
    "topicsCovered": ["Core Java"],
    "questions": [
      {
        "id": 1,
        "question": "What will be the output of the following code snippet?\n\npublic class Test {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3};\n        System.out.println(arr[3]);\n    }\n}",
        "options": [
          "1",
          "2",
          "3",
          "ArrayIndexOutOfBoundsException"
        ],
        "answer": "ArrayIndexOutOfBoundsException"
      },
      {
        "id": 2,
        "question": "Which of the following is true about Java interfaces?",
        "options": [
          "Interfaces can contain method implementations.",
          "Interfaces cannot be extended.",
          "An interface can extend multiple interfaces.",
          "An interface can have instance variables."
        ],
        "answer": "An interface can extend multiple interfaces."
      },
      {
        "id": 3,
        "question": "What is the purpose of the 'transient' keyword in Java?",
        "options": [
          "To prevent a variable from being serialized.",
          "To make a variable constant.",
          "To indicate that a variable is temporary.",
          "To prevent a variable from being modified."
        ],
        "answer": "To prevent a variable from being serialized."
      },
      {
        "id": 4,
        "question": "What will be the result of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = x++ * ++x;\n        System.out.println(y);\n    }\n}",
        "options": [
          "30",
          "35",
          "40",
          "25"
        ],
        "answer": "35"
      },
      {
        "id": 5,
        "question": "Which of the following is the correct syntax for creating a thread in Java?",
        "options": [
          "Thread t = new Thread();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.start();",
          "Thread t = new Thread();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.run();",
          "Thread t = new Thread(new Runnable());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.run();",
          "Thread t = new Thread(new Runnable());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.start();"
        ],
        "answer": "Thread t = new Thread(new Runnable());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.start();"
      },
      {
        "id": 6,
        "question": "What is the purpose of the 'final' keyword in Java?",
        "options": [
          "To create a constant variable.",
          "To prevent method overriding.",
          "To prevent inheritance.",
          "All of the above."
        ],
        "answer": "All of the above."
      },
      {
        "id": 7,
        "question": "What does the 'super' keyword refer to in Java?",
        "options": [
          "The current object instance.",
          "The parent class of the current object.",
          "The parent class of the current method.",
          "The superclass of the current class."
        ],
        "answer": "The parent class of the current object."
      },
      {
        "id": 8,
        "question": "Which of the following methods is used to synchronize a block of code in Java?",
        "options": [
          "synchronized",
          "lock",
          "wait",
          "notify"
        ],
        "answer": "synchronized"
      },
      {
        "id": 9,
        "question": "What will be the output of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        String str = \"Java\";\n        str.concat(\" is fun\");\n        System.out.println(str);\n    }\n}",
        "options": [
          "Java is fun",
          "Java fun",
          "Java",
          "Fun is Java"
        ],
        "answer": "Java"
      },
      {
        "id": 10,
        "question": "What is the difference between '== 'and '.equals()' method in Java?",
        "options": [
          "'==' checks for reference equality, '.equals()' checks for value equality.",
          "'==' checks for value equality, '.equals()' checks for reference equality.",
          "'==' and '.equals()' are equivalent.",
          "'==' is used for primitives, '.equals()' is used for objects."
        ],
        "answer": "'==' checks for reference equality, '.equals()' checks for value equality."
      },
      {
        "id": 11,
        "question": "Which of the following is not a valid access modifier in Java?",
        "options": [
          "private",
          "protected",
          "default",
          "internal"
        ],
        "answer": "internal"
      },
      {
        "id": 12,
        "question": "What does the 'instanceof' keyword do in Java?",
        "options": [
          "Checks if an object is an instance of a specific class or subclass.",
          "Checks if an object is an instance of a specific interface.",
          "Checks if an object can be cast to a specific type.",
          "Checks if an object is not an instance of a specific class."
        ],
        "answer": "Checks if an object is an instance of a specific class or subclass."
      },
      {
        "id": 13,
        "question": "How can you handle exceptions in Java?",
        "options": [
          "Using try-catch blocks.",
          "Using throw statements.",
          "Using throws declarations.",
          "All of the above."
        ],
        "answer": "All of the above."
      },
      {
        "id": 14,
        "question": "What is the output of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        String str = \"abc\";\n        String str2 = str.toUpperCase();\n        System.out.println(str == str2);\n    }\n}",
        "options": [
          "true",
          "false",
          "abc",
          "ABC"
        ],
        "answer": "false"
      },
      {
        "id": 15,
        "question": "Which of the following is not a feature of Java?",
        "options": [
          "Platform independence",
          "Automatic garbage collection",
          "Multiple inheritance through classes",
          "Object-oriented programming"
        ],
        "answer": "Multiple inheritance through classes"
      },
      {
        "id": 16,
        "question": "What is the purpose of the 'static' keyword in Java?",
        "options": [
          "To declare class-level methods and variables.",
          "To prevent a variable from being modified.",
          "To create a constant variable.",
          "To synchronize code blocks."
        ],
        "answer": "To declare class-level methods and variables."
      },
      {
        "id": 17,
        "question": "What is the result of executing the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        int x = 10;\n        int y = ++x * 2;\n        System.out.println(y);\n    }\n}",
        "options": [
          "20",
          "22",
          "24",
          "26"
        ],
        "answer": "22"
      },
      {
        "id": 18,
        "question": "What is the purpose of the 'this' keyword in Java?",
        "options": [
          "To refer to the current instance of a class.",
          "To refer to the parent class.",
          "To refer to a specific method.",
          "To create a new instance of a class."
        ],
        "answer": "To refer to the current instance of a class."
      },
      {
        "id": 19,
        "question": "What will be the result of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        String str = \"123\";\n        int num = Integer.parseInt(str);\n        System.out.println(num);\n    }\n}",
        "options": [
          "123",
          "123.0",
          "Integer",
          "NumberFormatException"
        ],
        "answer": "123"
      },
      {
        "id": 20,
        "question": "Which Java collection class maintains the insertion order?",
        "options": [
          "HashSet",
          "LinkedHashSet",
          "TreeSet",
          "ArrayList"
        ],
        "answer": "LinkedHashSet"
      },
      {
        "id": 21,
        "question": "What will be the output of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        String str1 = \"hello\";\n        String str2 = \"hello\";\n        System.out.println(str1 == str2);\n    }\n}",
        "options": [
          "true",
          "false",
          "hello",
          "Compilation error"
        ],
        "answer": "true"
      },
      {
        "id": 22,
        "question": "Which of the following is a valid declaration of a two-dimensional array in Java?",
        "options": [
          "int[][] arr;",
          "int arr[][];",
          "int arr[];",
          "Both A and B"
        ],
        "answer": "Both A and B"
      },
      {
        "id": 23,
        "question": "What does the 'continue' statement do in Java?",
        "options": [
          "Skips the current iteration of a loop.",
          "Exits from the loop.",
          "Breaks out of the loop.",
          "Exits from the current method."
        ],
        "answer": "Skips the current iteration of a loop."
      },
      {
        "id": 24,
        "question": "Which of the following is not a valid Java keyword?",
        "options": [
          "enum",
          "interface",
          "class",
          "struct"
        ],
        "answer": "struct"
      },
      {
        "id": 25,
        "question": "Which method is used to start a thread in Java?",
        "options": [
          "start()",
          "run()",
          "execute()",
          "init()"
        ],
        "answer": "start()"
      },
      {
        "id": 26,
        "question": "What is the output of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        String str = \"hello world\";\n        String substr = str.substring(6);\n        System.out.println(substr);\n    }\n}",
        "options": [
          "hello",
          "world",
          "hello world",
          "hello rld"
        ],
        "answer": "world"
      },
      {
        "id": 27,
        "question": "What is the purpose of the 'volatile' keyword in Java?",
        "options": [
          "To make a variable thread-safe.",
          "To make a method synchronized.",
          "To create a constant variable.",
          "To ensure the variable is not optimized by the compiler."
        ],
        "answer": "To ensure the variable is not optimized by the compiler."
      },
      {
        "id": 28,
        "question": "What is the result of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        int x = 5;\n        int y = 10;\n        System.out.println(x == y ? \"Equal\" : \"Not Equal\");\n    }\n}",
        "options": [
          "Equal",
          "Not Equal",
          "true",
          "false"
        ],
        "answer": "Not Equal"
      },
      {
        "id": 29,
        "question": "Which of the following is true about Java exception handling?",
        "options": [
          "Checked exceptions are not required to be caught or declared.",
          "Unchecked exceptions must be caught or declared.",
          "The 'finally' block always executes, regardless of whether an exception is thrown or not.",
          "The 'catch' block can be skipped when declaring exceptions."
        ],
        "answer": "The 'finally' block always executes, regardless of whether an exception is thrown or not."
      },
      {
        "id": 30,
        "question": "What is the output of the following code?\n\npublic class Test {\n    public static void main(String[] args) {\n        String str = \"123\";\n        String result = str + 456;\n        System.out.println(result);\n    }\n}",
        "options": [
          "123456",
          "123 456",
          "456123",
          "Compilation error"
        ],
        "answer": "123456"
      }
    ]
  }
  